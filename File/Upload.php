<?php
# There’s a danger of multiple classes having the same name. Nota autoloader þegar við erum með mikið af klösum.
# based on the folder structure, but use backslashes '\' instead of underscores (gamalt)
namespace File; # to avoid naming conflicts

 # fyrsta nálgun Solution 6-2
 # A class is a collection of functions designed to work together. (einföldun)
 # Each function inside a class should normally focus on a single task (fleiri en færri föll)
 # The code should also be generic so it isn’t tied to a specific webpage (endurnýtanlegt)
 
 # gefum class heiti (stór stafur) og skilgreinum hann með class nafni og opnum og lokuðum slaufusviga
 # Fullt heiti er þá File\Upload
class Upload {

    # protected þýðir að það er aðeins hægt að nálgast property(breytu) eða method(function) innan class (sama og private), við viljum ekki breyta gildi óvart. 
    # The public and protected keywords control the visibility of properties and methods. 
    # Public properties and methods can be accessed anywhere. 
    # Any attempt to access protected properties or methods outside the class definition or a subclass triggers a fatal error.
    # Með protected er hægt að nota extend (erfðir), private getur það ekki.

    protected $uploaded = [];   # mun geyma skráarupplýsingar, tómt
    protected $destination;     # uploadmappa, tómt, gildi verður sett þegar til verður object af þessum class
    protected $max = 51200;     # Það sem má uploada í bytes (50KB)
    protected $messages = [];   # fylki tómt, sem geymir skilaboð til notandans
    protected $permitted = [    # snið sem eru leyfð 
        'image/gif',
        'image/jpeg',
        'image/pjpeg',
        'image/png'
    ];
 
    # Þegar þú býrð til tilvik af class, þá er fyrst kallað á smiðinn
    # Smiður, nota tvær undirlínur saman + orðið construct, þarf að vera public þ.e. aðgengilegur utan class
    # parameter $path geymir slóðin að upload möppu, sem  er sett í protected breytuna $destination
    public function __construct($path) {

        # athuga hvort dir sé valid og skrifanlegt, ef ekki þá villumelding
        if (!is_dir($path) || !is_writable($path)) {

            # The backslash in front of Exception indicates that a core PHP command is to be used rather than one defined within the namespace (class)
            throw new \Exception("$path must be a valid, writable directory.");
        }
        # Ef slóð er í lagi þá er hún færð í breytu, $this-> refers to the current object
        $this->destination = $path;     # við vísum í breytu/property með breytuheiti, en sleppum $ 
        
        # núna á t.d. tilvikið  $loader sem við bjuggum til í index.php property, $destination með slóð að upload möppu
        # Við getum samt ekki gert $loader->destination til að sjá slóð í index.php þar sem hún er protected (ekki public)
    }

    public function upload() {
        # Við þurfum að vita name heiti í input="file" til að geta unnið með $_FILES
        # current, tekur array sem parameter og skilar current element fylkis, eða fyrsta elementið í $_FILES sem er key (name attribute).  
        # $_FILES is one of PHP’s superglobal arrays, so it’s available in all parts of a script. That’s why there’s no need to pass it as an argument to the class constructor method. 
        $uploaded = current($_FILES); # $upload geymir "image" frá index.php, holds a reference to the first element in the $_FILES array regardless of the name used in the form.(generic code) 

        # test the file, before upload
        # The $this keyword is also used to call functions (methods) defined within the class. (sama og Upload->checkFile())
        if ($this->checkFile($uploaded)) {
            
            # upload file
            $this->moveFile($uploaded);
        }
    }

 
    # Public properties can be accessed—and changed—outside the class definition. 
    # Protecting $messages ensures that the contents of the array cannot be altered, so you know the message has been generated by the class. 
    public function getMessages() {
        return $this->messages;
    }


    # method sem er kallað á aðeins innan class (protected), frá upload()
    # Tómt, eftir að útfæra, sjá PHP Solution 6-3 
    protected function checkFile($file) {
        return true;
    }

    # move() til að fá aðgang að skráarupplýsingum og færa þau í upload möppuna á server
    # Til að fá aðgang að skrám í $_FILES þá þarf að vita name attribute í input reit notandans.  
    # Við vitum það ekki fyrirfram (breytilegt eftir input reitum).
    # Þurfum falls sem er sveigjanlegt/almennara/fjölnota. 
    # move() þarf að keyra þeagr búið er að smella á submit.

    
    # method sem er kallað á aðeins innan class (protected)
    protected function moveFile($file) {

      
        # tmp_name er nafnið á temproary skránni á server, seinna argumentið er full pathname á nýju staðsetningunni
        # niðurstaðan vistuð í $success, skilar true/false
        $success = move_uploaded_file($file['tmp_name'], $this->destination . $file['name']);
        
        # stýrum hvaða skilaboð eru notuð í messages[]
        # $_message er proctected og þarf því á public  getMessages aðferð að halda svo sé hægt að ná í skilaboðin í fylkinu.
        if ($success) {
            $result = $file['name'] . ' was uploaded successfully';
            $this->messages[] = $result;
        } else {
            $this->messages[] = 'Could not upload ' . $file['name'];
        }
    }

# The order of function (method) definitions inside a class doesn’t matter
# it’s common practice to keep all public methods together at the top, with protected methods at the bottom. 
}